{{# ******************** Expressions ******************** }}
{{# Primitives}}
{{ 42 }} {{ -12 }} {{ 0}}
{{ 3.14 }} {{ -0.001 }} {{ 2.71828 }}
{{ true }} {{ false }}
{{ null }}
{{ "Hello, Osmia!" }} {{ "" }}
{{ 'Hello, Osmia!' }} {{ '' }}

{{# Collections}}
{{ [] }} {{ [1, 2] }} {{ [true, false] }} {{ ["", "foo", null] }}
{{ {} }} {{ { "name": "Alice", "age": 30, "isAdmin": false } }}
{{ [[], [[], []]] }}
{{ { "obj": {}, "2": { "obj": {} } } }}

{{# Grouping}}
{{ (2 + 3) * 4 != 2 + (3 * 4) }}
{{ 2 + (3 * 4) == 2 + 3 * 4 }}
{{ (((2 + 2)-1) * 2) == (2 + 2 - 1) * 2 }}

{{# Variables and Assignments}}
{{ x = 10 }} {{ y = x }}
{{ greeting = "Hello" }}
{{ math.abs }}
{{ math.test = fn (x) => x * x * x }}
{{ arr = [] }}{{ arr[0] = 10 }}{{ arr }}
{{ obj = {} }}{{ obj.foo = "bar" }}{{ obj }}

{{# Callables }}
{{ math.max(5, 10) }}
{{ true?then("Yes", "No") }}
{{ fn (x, y) => x + y }}

{{# Arithmetic Operations}}
{{ 5 + 3 }}{{ 10 - 4 }}
{{ 6 * 7 }}{{ 20 / 5 }}{{ 10 % 3 }}
{{ -5 }} {{ +5 }} {{ +-+--5 }}

{{# Comparison Operations}}
{{ 5 == 5 }}{{ 5 != 3 }}
{{ 7 > 5 }}{{ 3 < 8 }}
{{ 5 >= 5 }}{{ 4 <= 6 }}

{{# Logical Operations}}
{{ true && false }}
{{ true || false }}
{{ !true }}

{{# Bitwise Operations}}
{{ 5 & 3 }}{{ 5 | 2 }}{{ 5 ^ 1 }}
{{ 1 << 2 }}{{ 8 >> 1 }}

{{# Escaping}}
{ { not evaluated } } {{ '{{ foo }}' }}

{{# Methods }}
{{ "hello"?len() }} {{ 1?to_bool() }} {{ 1.1?to_int() }}
{{ true?type() }} {{ null?to_string() }}
{{ [1, 2]?len() }} {{ { "foo": "bar" }?keys()?sort() }}
{{ (fn (x) => x)?type() }}
{{ "foo"?switch("foo", fn (x) => x, "bar", math.abs) }}
{{ ["s", 1, 1.23, true, false, null, [], {}, fn(x) => x]?map(fn (x) => x?type()) }}


Plain text without syntax
[1, 2, 3]?map(fn (x) => x?type())
{ "foo": "bar" }?type() {} { v: "foo" }
"This is a string" + foo
12 * 2 << 2 == 12 <= 2 >= 12
fn (foo) => foo?type()

{{# ******************** Statements ******************** }}
{{# Print }}
{{print 42 }} {{print "foo"}}
{{v = 2}}{{print 1 + 2 * v }}
{{print true & false | null?to_bool() }}

{{# Assign }}
{{ v = "foo" }} {{ v = 42 }}
{{ b = true & false | null?to_bool() }}
{{ v = 1 + 2 * v }}
{{ f = fn (x, y) => x + y }}

{{# If, Elseif, Else }}
{{if false}}{{fi}}
{{if true }}
    {{ v = 1 }}
{{else}}
    {{ v = 2 }}
{{fi}}

{{if v == 1}}
    {{ v = 1 }}
{{elseif v == 2}}
    {{ v = 2 }}
{{else}}
    {{ v = 3 }}
{{fi}}

{{# While }}
{{while false}}{{done}}
{{while true }}
    {{ v = 1 }}
    {{break}}
{{done}}

{{# For }}
{{ arr = [1, 2, 3] }}
{{for i in [1, 2, 3]}}
    {{ i }}
{{done}}
{{for i in arr}}
    {{ i }}
{{done}}

{{# Break, Continue }}
{{for i in arr}}
    {{if i <= 1}}{{continue}}{{fi}}
    {{ i }}
{{done}}
{{for i in arr}}
    {{if i == 2}}{{break}}{{fi}}
    {{ i }}
{{done}}

{{# Function, Return }}
{{fn add; x, y }}
    {{return x + y }}
{{done}}

{{fn fibonacci; n }}
    {{if n <= 0}}
        {{return 0}}
    {{elseif n == 1}}
        {{return 1}}
    {{fi}}
    {{return fibonacci(n - 1) + fibonacci(n - 2)}}
{{done}}